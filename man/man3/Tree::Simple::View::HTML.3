.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tree::Simple::View::HTML 3"
.TH Tree::Simple::View::HTML 3 "2014-01-07" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::Simple::View::HTML \- A class for viewing Tree::Simple hierarchies in HTML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::View::HTML;
\&  
\&  ## a simple example
\&  # use the defaults (an unordered list with no CSS)
\&  my $tree_view = Tree::Simple::View::HTML\->new($tree);
\&
\&  ## more complex examples
\&                                        
\&  # use the CSS properties                                    
\&  my $tree_view = Tree::Simple::View::HTML\->new($tree => (
\&                                list_type  => "ordered",
\&                                list_css => "list\-style: circle;",
\&                                list_item_css => "font\-family: courier;",
\&                                expanded_item_css => "font\-family: courier; font\-weight: bold",                               
\&                                ));  
\&                                
\&  # use the CSS classes                                  
\&  my $tree_view = Tree::Simple::View::HTML\->new($tree => (
\&                                list_css_class => "myListClass",
\&                                list_item_css_class => "myListItemClass",
\&                                expanded_item_css_class => "myExpandedListItemClass",                                

\&                                   
\&  # mix the CSS properties and CSS classes
\&  my $tree_view = Tree::Simple::View::HTML\->new($tree => (
\&                                list_css => "list\-style: circle;",
\&                                list_item_css => "font\-family: courier;",
\&                                expanded_item_css_class => "myExpandedListItemClass",                                                         
\&                                node_formatter => sub {
\&                                    my ($tree) = @_;
\&                                    return "<B>" . $tree\->getNodeValue()\->description() . "</B>";
\&                                    }
\&                                ));  
\&                              
\&  
\&  # print out the tree fully expanded
\&  print $tree_view\->expandAll();
\&  
\&  # print out the tree expanded along a given path (see below for details)
\&  print $tree_view\->expandPath("Root", "Child", "GrandChild");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a class for use with Tree::Simple object hierarchies to serve as a means of 
displaying them in \s-1HTML.\s0 It is the \*(L"View\*(R", while the Tree::Simple object hierarchy 
would be the \*(L"Model\*(R" in your standard Model-View-Controller paradigm.
.PP
This class outputs fairly vanilla \s-1HTML\s0 in its simpliest configuration, suitable for 
both legacy browsers and text-based browsers. Through the use of various configuration 
options, \s-1CSS\s0 can be applied to support more advanced browsers but still degrade 
gracefully to legacy browsers.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "\fBnew ($tree, \fB%configuration\fB)\fR" 4
.el .IP "\fBnew ($tree, \f(CB%configuration\fB)\fR" 4
.IX Item "new ($tree, %configuration)"
Accepts a \f(CW$tree\fR argument of a Tree::Simple object (or one derived from Tree::Simple), 
if \f(CW$tree\fR is not a Tree::Simple object, and exception is thrown. This \f(CW$tree\fR object 
does not need to be a \s-1ROOT,\s0 you can start at any level of the tree you desire. The 
options in the \f(CW%config\fR argument are as follows:
.RS 4
.IP "\fItag_style\fR" 4
.IX Item "tag_style"
This can be either 'html' or 'xhtml', which will produce output with tags in capitals 
or lowercase respectively, for xhtml compliance. The default is 'html' for backwards 
compatibility.
.IP "\fIlist_type\fR" 4
.IX Item "list_type"
This can be either 'ordered' or 'unordered', which will produce ordered and unordered 
lists respectively. The default is 'unordered'.
.IP "\fIlist_css\fR" 4
.IX Item "list_css"
This can be a string of \s-1CSS\s0 to be applied to the list tag (\f(CW\*(C`UL\*(C'\fR or \f(CW\*(C`OL\*(C'\fR depending 
upon the \fIlist_type\fR option). This option and the \fIlist_css_class\fR are mutually 
exclusive, and this option will override in a conflict.
.IP "\fIlist_css_class\fR" 4
.IX Item "list_css_class"
This can be a \s-1CSS\s0 class name which is applied to the list tag (\f(CW\*(C`UL\*(C'\fR or \f(CW\*(C`OL\*(C'\fR depending 
upon the \fIlist_type\fR option). This option and the \fIlist_css\fR are mutually exclusive, 
and the \fIlist_css\fR option will override in a conflict.
.IP "\fIlist_item_css\fR" 4
.IX Item "list_item_css"
This can be a string of \s-1CSS\s0 to be applied to the list item tag (\f(CW\*(C`LI\*(C'\fR). This option 
and the \fIlist_item_css_class\fR are mutually exclusive, and this option will override 
in a conflict.
.IP "\fIlist_item_css_class\fR" 4
.IX Item "list_item_css_class"
This can be a \s-1CSS\s0 class name which is applied to the list item tag (\f(CW\*(C`LI\*(C'\fR). This option 
and the \fIlist_item_css\fR are mutually exclusive, and the \fIlist_item_css\fR option will 
override in a conflict.
.IP "\fIexpanded_item_css\fR" 4
.IX Item "expanded_item_css"
This can be a string of \s-1CSS\s0 to be applied to the list item tag (\f(CW\*(C`LI\*(C'\fR) if it has an 
expanded set of children. This option and the \fIexpanded_item_css_class\fR are mutually 
exclusive, and this option will override in a conflict.
.IP "\fIexpanded_item_css_class\fR" 4
.IX Item "expanded_item_css_class"
This can be a \s-1CSS\s0 class name which is applied to the list item tag (\f(CW\*(C`LI\*(C'\fR) if it has 
an expanded set of children. This option and the \fIexpanded_item_css\fR are mutually 
exclusive, and the \fIexpanded_item_css\fR option will override in a conflict.
.IP "\fInode_formatter\fR" 4
.IX Item "node_formatter"
This can be a \s-1CODE\s0 reference which will be given the current tree object as its only 
argument. The output of this subroutine will be placed within the list item tags 
(\f(CW\*(C`LI\*(C'\fR). This option can be used to implement; custom formatting of the node, handling 
of complex node objects or implementing any type of handler code to drive your 
interface (using link tags or form submissions, etc).
.RE
.RS 4
.RE
.IP "\fBgetTree\fR" 4
.IX Item "getTree"
A basic accessor to reach the underlying tree object.
.IP "\fBgetConfig\fR" 4
.IX Item "getConfig"
A basic accessor to reach the underlying configuration hash.
.IP "\fBincludeTrunk ($boolean)\fR" 4
.IX Item "includeTrunk ($boolean)"
This controls the getting and setting (through the optional \f(CW$boolean\fR argument) of 
the option to include the tree's trunk in the output. Many times, the trunk is not 
actually part of the tree, but simply a root from which all the branches spring. 
However, on occasion, it might be nessecary to view a sub-tree, in which case, the 
trunk is likely intended to be part of the output. This option defaults to off.
.IP "\fBsetPathComparisonFunction ($CODE)\fR" 4
.IX Item "setPathComparisonFunction ($CODE)"
This takes a \f(CW$CODE\fR reference, which can be used to add custom path comparison 
features to Tree::Simple::View. The function will get two arguments, the first is 
the \f(CW$current_path\fR, the second is the \f(CW$current_tree\fR. When using \f(CW\*(C`expandPath\*(C'\fR, 
it may sometimes be nessecary to be able to control the comparison of the path values. 
For instance, your node may be an object and need a specific method called to match 
the path against.
.IP "\fBexpandPath (@path)\fR" 4
.IX Item "expandPath (@path)"
This method will return a string of \s-1HTML\s0 which will represent your tree expanded 
along the given \f(CW@path\fR. This is best shown visually. Given this tree:
.Sp
.Vb 10
\&  Tree\-Simple\-View
\&      lib
\&          Tree
\&              Simple
\&                  View.pm
\&                  View
\&                      HTML.pm
\&                      DHTML.pm
\&      Makefile.PL
\&      MANIFEST
\&      README 
\&      Changes
\&      t
\&          10_Tree_Simple_View_test.t
\&          20_Tree_Simple_View_HTML_test.t
\&          30_Tree_Simple_View_DHTML_test.t
.Ve
.Sp
And given this path:
.Sp
.Vb 1
\&  Tree\-Simple\-View, lib, Tree, Simple
.Ve
.Sp
Your display would like something like this:
.Sp
.Vb 11
\&  Tree\-Simple\-View
\&      lib
\&          Tree
\&              Simple
\&                  View.pm
\&                  View
\&      Makefile.PL
\&      MANIFEST
\&      README 
\&      Changes
\&      t
.Ve
.Sp
As you can see, the given path has been expanded, but no other sub-trees are 
shown (nor is the \s-1HTML\s0 of the un-expanded nodes to be found in the output).
.Sp
It should be noted that this method actually calls either the \f(CW\*(C`expandPathSimple\*(C'\fR 
or \f(CW\*(C`expandPathComplex\*(C'\fR method depending upon the \f(CW%config\fR argument in the 
constructor. See their documenation for details.
.ie n .IP "\fBexpandPathSimple ($tree, \fB@path\fB)\fR" 4
.el .IP "\fBexpandPathSimple ($tree, \f(CB@path\fB)\fR" 4
.IX Item "expandPathSimple ($tree, @path)"
If no \f(CW%config\fR argument is given in the constructor, then this method is called 
by \f(CW\*(C`expandPath\*(C'\fR. This method is optimized since it does not need to process any 
configuration, but just as the name implies, it's output is simple.
.Sp
This method can also be used for another purpose, which is to bypass a previously 
specified configuration and use the base \*(L"simple\*(R" configuration instead.
.ie n .IP "\fBexpandPathComplex ($tree, \fB$config\fB, \f(BI@path\fB)\fR" 4
.el .IP "\fBexpandPathComplex ($tree, \f(CB$config\fB, \f(CB@path\fB)\fR" 4
.IX Item "expandPathComplex ($tree, $config, @path)"
If a \f(CW%config\fR argument is given in the constructor, then this method is called 
by \f(CW\*(C`expandPath\*(C'\fR. This method has been optimized to be used with configurations, 
and will actually custom compile code (using \f(CW\*(C`eval\*(C'\fR) to speed up the generation 
of the output.
.Sp
This method can also be used for another purpose, which is to bypass a previously 
specified configuration and use the configuration specified (as a \s-1HASH\s0 reference) 
in the \f(CW$config\fR parameter.
.IP "\fBexpandAll\fR" 4
.IX Item "expandAll"
This method will return a string of \s-1HTML\s0 which will represent your tree completely 
expanded.
.Sp
It should be noted that this method actually calls either the \f(CW\*(C`expandAllSimple\*(C'\fR 
or \f(CW\*(C`expandAllComplex\*(C'\fR method depending upon the \f(CW%config\fR argument in the 
constructor.
.IP "\fBexpandAllSimple\fR" 4
.IX Item "expandAllSimple"
If no \f(CW%config\fR argument is given in the constructor, then this method is called 
by \f(CW\*(C`expandAll\*(C'\fR. This method too is optimized since it does not need to process 
any configuration.
.Sp
This method as well can also be used to bypass a previously specified configuration 
and use the base \*(L"simple\*(R" configuration instead.
.IP "\fBexpandAllComplex ($config)\fR" 4
.IX Item "expandAllComplex ($config)"
If a \f(CW%config\fR argument is given in the constructor, then this method is called 
by \f(CW\*(C`expandAll\*(C'\fR. This method too has been optimized to be used with configurations, 
and will also custom compile code (using \f(CW\*(C`eval\*(C'\fR) to speed up the generation of 
the output.
.Sp
Just as with \f(CW\*(C`expandPathComplex\*(C'\fR, this method can be to bypass a previously 
specified configuration and use the configuration specified (as a \s-1HASH\s0 reference) 
in the \f(CW$config\fR parameter.
.SH "TO DO"
.IX Header "TO DO"
.IP "\fBdepth-based css\fR" 4
.IX Item "depth-based css"
I would like to be able to set any of my css properties as an array, which would 
essentially allow for depth-based css values. For instance, something like this:
.Sp
.Vb 5
\&  list_css => [
\&      "font\-size: 14pt;",
\&      "font\-size: 12pt;",
\&      "font\-size: 10pt;"      
\&      ];
.Ve
.Sp
This would result in the first level of the tree having a font-size of 14 points, 
the second level would have a font-size of 12 points, then all other levels past 
the second level (third and beyond) would have a font-size of 10 points. Of course 
if a fourth element were added to this array (ex: \*(L"font-size: 8pt;\*(R"), then the third 
level would have a font-size of 10 points, and all others past that level would 
have the font-size of 8 points.
.Sp
Ideally this option would be available for all \fI*_css\fR and \fI*_css_class\fR options. 
I have not yet figured out the best way to do this though, so ideas/suggestions are 
welcome, of course, patches are even better.
.SH "BUGS"
.IX Header "BUGS"
None that I am aware of. Of course, if you find a bug, let me know, and I will be 
sure to fix it.
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \s-1CODE COVERAGE\s0 section of Tree::Simple::View for details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
If a \s-1DHTML\s0 based tree is what you are after, then look at the Tree::Simple::View::DHTML class.
.PP
A great \s-1CSS\s0 reference can be found at:
.PP
.Vb 1
\&    http://www.htmlhelp.com/reference/css/
.Ve
.PP
Information specifically about \s-1CSS\s0 for \s-1HTML\s0 lists is at:
.PP
.Vb 1
\&    http://www.htmlhelp.com/reference/css/classification/list\-style.html
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004\-2008 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
