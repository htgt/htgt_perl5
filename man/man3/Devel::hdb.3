.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::hdb 3"
.TH Devel::hdb 3 "2013-05-28" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::hdb \- Perl debugger as a web page and REST service
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
hdb is a Perl debugger that uses \s-1HTML\s0 and javascript to implement the \s-1GUI.\s0
This front-end talks to a \s-1REST\s0 service provided by the debugger running with
the Perl code.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To debug a Perl program, start it like this:
.PP
.Vb 1
\&    perl \-d:hdb youprogram.pl
.Ve
.PP
It will print a message on \s-1STDERR\s0 with the \s-1URL\s0 the debugger is listening to.
Point your web browser at this \s-1URL\s0 and it will being up the debugger \s-1GUI.\s0
It defaults to listening on localhost port 8080; to use a different port,
start it like this:
.PP
.Vb 1
\&    perl \-d:hdb=port:9876 yourprogram.pl
.Ve
.PP
To specify a particular \s-1IP\s0 address to listen on:
.PP
.Vb 1
\&    perl \-d:hdb=host:192.168.0.123 yourprogram.pl
.Ve
.PP
And to listen on any interface:
.PP
.Vb 1
\&    perl \-d:hdb=a yourprogram.pl
.Ve
.SS "Interface"
.IX Subsection "Interface"
The \s-1GUI\s0 is divided into three main parts: Control buttons, Code browser and
Watch expressions.  Additionally, click on the thick border between the code
and watch panes to slide out the breakpoint list.
.PP
\fIControl buttons\fR
.IX Subsection "Control buttons"
.IP "Step In" 4
.IX Item "Step In"
Causes the debugger to execute the next line and stop.  If the next line is a
subroutine call, it will stop at the first executable line in the subroutine.
.IP "Step Over" 4
.IX Item "Step Over"
Causes the debugger to execute the next line and stop.  If the next line is a
subroutine call, it will step over the call and stop when the subroutine
returns.
.IP "Step Out" 4
.IX Item "Step Out"
Causes the debugger to run the program until it returns from the current
subroutine.
.IP "Run" 4
.IX Item "Run"
Resumes execution of the program until the next breakpoint.
.IP "Exit" 4
.IX Item "Exit"
The debugged program immediately exits.  The \s-1GUI\s0 in the web browser remains
running.
.PP
\fICode Browser\fR
.IX Subsection "Code Browser"
.PP
Most of the interface is taken up by the code browser.  Tabs along the top
show one file at a time.  The \*(L"+\*(R" next to the last tab brings up a dialog
to choose another file to open.  Click the \*(L"x\*(R" next to a file name to close
that tab.
.PP
The first tab is special: it shows the stack frames of the currently
executing program and cannot be closed.  The stack tab itself has tabs along
the left, one tab for each stack frame; the most recent frame is at the top.
.PP
Each of these tabs shows a Code Pane.  The line numbers on the left are struck
through if that line is not breakable.  For breakable lines, clicking on the
line number will set an unconditional breakpoint and turn the number red.
Right-clicking on a breakable line number will bring up a menu where a
breakpoint condition and action can be set.  Lines with conditional breakpoints
are blue.  Lines with actions have a circle outline, and are dimmed when the
breakpoint is inactive.
.PP
The banner at the top of the Code Pane shows the current function and its
arguments.  Clicking on the banner will scoll the Code Pane to show the
currently executing line.
.PP
Hover the mouse over a variable to see its value.  It shows the value in
whichever stack frame is being displayed.  To see the values for variables
in higher frames, select the appropriate frame from the tab on the left.
.PP
\fIWatch Expressions\fR
.IX Subsection "Watch Expressions"
.PP
The right side of the \s-1GUI\s0 shows watch expressions.  To add a new expression to
the watch window, click on the \*(L"+\*(R".  To remove a watched expression, click on
the \*(L"x\*(R" next to its name.  Composite types like Hashes and arrays have a blue
circled number indicating how many elements belong to it.  To collapse/expand
them, click the blue cicle.
.PP
\fIKey bindings\fR
.IX Subsection "Key bindings"
.PP
The debugger responds to these keys, which are generally the same as the
command-line debugger commands
.IP "s" 4
.IX Item "s"
Step in
.IP "n" 4
.IX Item "n"
Step over
.IP "<\s-1CR\s0>" 4
.IX Item "<CR>"
Repeat the last 's' or 'n'
.IP "r" 4
.IX Item "r"
Step out
.IP "c" 4
.IX Item "c"
Continue/Run
.IP "q" 4
.IX Item "q"
Quit/Exit
.IP "x" 4
.IX Item "x"
Add new watch expression
.IP "f" 4
.IX Item "f"
Add new file
.IP "." 4
Scroll the code window to show the current line
.IP "L" 4
.IX Item "L"
Open the breakpoint manager
.IP "b" 4
.IX Item "b"
Toggle a breakpoint on the current line
.SS "Child Processes"
.IX Subsection "Child Processes"
The debugger overrides Perl's \fIfork()\fR built-in so that the child process will
stop with the first statement after the \fIfork()\fR.  In the parent process'
debugger window, it will pop up a dialog with two options
.IP "Open Open a new browser window and debug the child process inside it" 4
.IX Item "Open Open a new browser window and debug the child process inside it"
.PD 0
.IP "Detach Disables the debugger in the child process, and forces it to run to completion." 4
.IX Item "Detach Disables the debugger in the child process, and forces it to run to completion."
.PD
.SS "Trace and Follow mode"
.IX Subsection "Trace and Follow mode"
Devel::hdb can trace the execution of a program and stop if the code path
differs from that of a previously saved run.  First, run the program in trace
mode:
.PP
.Vb 1
\&  perl \-d:hdb=trace:<tracefile> yourprogram.pl
.Ve
.PP
In trace mode, the program runs normally, and the debugger does not stop
execution.  It records information about which lines of code were run into
the specified file (tracefile, in this example).  Next, run the program
again in follow mode:
.PP
.Vb 1
\&  perl \-d:hdb=follow:<tracefile> yourprogram.pl
.Ve
.PP
This time, the debugger starts up normally, stopping on the first line of the
program.  As the program runs, the debugger reads the trace information from
the specified file.  The first time the current location is different than
what is in the file, the debugger will stop and report which line it expected.
After it stops in this way, follow mode is disabled.
.SS "Included Code"
.IX Subsection "Included Code"
This package includes these third party libraries:
.IP "\(bu" 4
jQuery version 1.7.2 <http://jquery.com/>
.IP "\(bu" 4
scrollTo jQuery plugin version 1.4.3.1 <http://flesler.blogspot.com/2007/10/jqueryscrollto.html>
.IP "\(bu" 4
Twitter Bootstrap version 2.3.0 <http://twitter.github.com/bootstrap/index.html>
.IP "\(bu" 4
Handlebars version 1.0rc2 <http://handlebarsjs.com/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Anthony Brummett <brummett@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2013, Anthony Brummett.  This module is free software. It may
be used, redistributed and/or modified under the same terms as Perl itself.
