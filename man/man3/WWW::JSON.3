.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::JSON 3"
.TH WWW::JSON 3 "2015-09-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::JSON \- Make working with JSON Web API's as painless as possible
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use WWW::JSON;
\&
\&    my $wj = WWW::JSON\->new(
\&        base_url => \*(Aqhttp://api.metacpan.org/v0?fields=name,distribution&size=1\*(Aq,
\&        post_body_format           => \*(AqJSON\*(Aq,
\&        default_response_transform => sub { shift\->{hits}{hits}[0]{fields} },
\&    );
\&
\&    my $get = $wj\->get(
\&        \*(Aq/release/_search\*(Aq,
\&        {
\&            q      => \*(Aqauthor:ANTIPASTA\*(Aq,
\&            filter => \*(Aqstatus:latest\*(Aq,
\&        }
\&    );
\&
\&    warn "DISTRIBUTION: " . $get\->res\->{distribution} if $get\->success;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1WWW::JSON\s0 is an easy interface to any modern web \s-1API\s0 that returns \s-1JSON.\s0
.PP
It tries to make working with these \s-1API\s0's as intuitive as possible.
.SH "ABSTRACT"
.IX Header "ABSTRACT"
When using abstracted web \s-1API\s0 libraries I often ran into issues where bugs in the library interfere with proper api interactions, or features  are added to the \s-1API\s0 that the library doesn't support.
.PP
In these cases the additional abstraction winds up making life more difficult.
.PP
Abstracted libraries do offer benefits.
.PP
.Vb 3
\&    \-Auth is taken care of for you.
\&    \-Cuts out boilerplate
\&    \-Don\*(Aqt have to think about HTTP status, JSON, or parameter serialization
.Ve
.PP
I wanted just enough abstraction to get the above benefits, but no more.
.PP
Thus, \s-1WWW::JSON\s0 was born. Perl + Web + \s-1JSON \-\s0 tears
.SS "\s-1FEATURES\s0"
.IX Subsection "FEATURES"
\&\-Light on dependencies
.PP
\&\-Don't repeat yourself
.PP
.Vb 5
\&    \-Set a url that all requests will be relative to
\&    \-Set query params included on all requests
\&    \-Set body params included on all requests that contain a POST body
\&    \-URL paths support primitive templating
\&    \-Transform the response of all API requests. Useful if an API returns data in a silly structure.
.Ve
.PP
\&\-Work with APIs that require different parameter serialization
.PP
.Vb 2
\&    \- Serialized post bodys (Facebook, Foursquare)
\&    \- JSON\-ified post bodys (Github, Google+)
.Ve
.PP
\&\-Role\-based Authentication
.PP
.Vb 4
\&    \-Basic
\&    \-OAuth 1.0a
\&    \-OAuth2
\&    \-New roles can easily be created for other auth schemes
.Ve
.PP
\&\-Avoids boilerplate
.PP
.Vb 2
\&    \-Don\*(Aqt have to worry about going from JSON => perl and back
\&    \-Handles HTTP and JSON decode errors gracefully
.Ve
.PP
\&\-Templating
    Can put templates in url paths
.PP
.Vb 3
\&    Use template toolkit style brackets in url. Populate a template variable in the second parameter\*(Aqs
\&    hashref by prefixing it with a dash(\-). Example:
\&        $wj\->get(\*(Aq/users/[% user_id %]/status, { page => 3, \-user_id => 456 });
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.SS "base_url"
.IX Subsection "base_url"
The root url that all requests will be relative to.
.PP
Any query parameters included in the base_url will be added to every request made to the api
.PP
Alternatively, an array ref consisting of the base_url and a hashref of query parameters can be passed like so:
.PP
base_url => [ 'http://google.com', { key1 => 'val1', key2 => 'val2'} ]
.SS "body_params"
.IX Subsection "body_params"
Parameters that will be added to every non-GET request made by \s-1WWW::JSON.\s0
.SS "post_body_format"
.IX Subsection "post_body_format"
How to serialize the post body.
.PP
\&'serialized' \- Normal post body serialization (this is the default)
.PP
\&'\s-1JSON\s0' \- JSONify the post body. Used by \s-1API\s0's like github and google plus
.SS "default_response_transform"
.IX Subsection "default_response_transform"
Many \s-1API\s0's have a lot of boilerplate around their json responses.
.PP
For example lets say every request's meaningful payload is included inside the first array index of a hash key called 'data'.
.PP
Instead of having to do \f(CW$res\fR\->{data}\->[0]\->{key1}, you can specify default_response_transform as sub { shift\->{data}\->[0] }
.PP
Then in your responses you can get at key1 directly by just doing \f(CW$res\fR\->{key1}
.PP
\&\s-1NOTE:\s0 This transform only occurs if no \s-1HTTP\s0 errors or decoding errors occurred. If we get back an \s-1HTTP\s0 error status it seems more useful to get back the entire decoded \s-1JSON\s0 blob
.SS "authentication"
.IX Subsection "authentication"
Accepts a single key value pair, where the key is the name of a WWW::JSON::Role::Authentication role and the value is a hashref containing the data the role needs to perform the authentication.
.PP
Supported authentication schemes:
.PP
OAuth1 => {
    consumer_key    => 'somekey',
    consumer_secret => 'somesecret',
    token           => 'sometoken',
    token_secret    => 'sometokensecret'
  }
.PP
Basic => { username => 'antipasta', password => 'hunter2' }
.PP
OAuth2 => Net::OAuth2::AccessToken\->new( ... )
.PP
New roles can be created to support different types of authentication. Documentation on this will be fleshed out at a later time.
.SS "ua_options"
.IX Subsection "ua_options"
Options that can be passed when initializing the useragent. For example { timeout => 5 }. See LWP::UserAgent for possibilities.
.SH "METHODS"
.IX Header "METHODS"
.SS "get"
.IX Subsection "get"
\&\f(CW$wj\fR\->get($path,$params)
.PP
Performs a \s-1GET\s0 request to the relative path \f(CW$path\fR. \f(CW$params\fR is a hashref of url query parameters.
.SS "post"
.IX Subsection "post"
\&\f(CW$wj\fR\->post($path,$params)
.PP
Performs a \s-1POST\s0 request. \f(CW$params\fR is a hashref of parameters to be passed to the post body
.SS "put"
.IX Subsection "put"
\&\f(CW$wj\fR\->put($path,$params)
.PP
Performs a \s-1PUT\s0 request. \f(CW$params\fR is a hashref of parameters to be passed to the post body
.SS "delete"
.IX Subsection "delete"
\&\f(CW$wj\fR\->delete($path,$params)
.PP
Performs a \s-1DELETE\s0 request. \f(CW$params\fR is a hashref of parameters to be passed to the post body
.SS "req"
.IX Subsection "req"
\&\f(CW$wj\fR\->req($method,$path,$params)
.PP
Performs an \s-1HTTP\s0 request of type \f(CW$method\fR. \f(CW$params\fR is a hashref of parameters to be passed to the post body
.SS "body_param"
.IX Subsection "body_param"
Add/Update a single body param
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Joe Papperello.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Joe Papperello <antipasta@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\-Net::OAuth2 \- For making OAuth2 signed requests with \s-1WWW::JSON\s0
.PP
\&\-App::Adenosine \- Using this on the command line definitely served as some inspiration for \s-1WWW::JSON.\s0
.PP
\&\-Net::HTTP::Spore \- I found this while researching other modules in this space. It's still a bit abstracted from the actual web request for my taste, but it's obvious the author created it out of some of the same above frustrations and it looks useful.
